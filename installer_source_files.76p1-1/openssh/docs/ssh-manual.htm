<HTML>
<HEAD>
<TITLE>Manual Pages: ssh</TITLE>
<link rev="made" href="mailto:wosch@FreeBSD.ORG">
<META name="robots" content="nofollow">
</HEAD> 
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">

<p><h2><font color=#e00000>Manual Pages</font><hr></h2> </H1>

<PRE>
SSH(1)                     OpenBSD Reference Manual                     SSH(1)

<a name="NAME" href="#end"><B>NAME</B></a>
     <B>ssh</B> - OpenSSH SSH client (remote login program)

<a name="SYNOPSIS" href="#end"><B>SYNOPSIS</B></a>
     <B>ssh</B> [<B>-l</B> <I>login_name</I>] <I>hostname</I> | <I>user@hostname</I> [<I>command</I>]

     <B>ssh</B> [<B>-afgknqstvxACNPTX1246</B>] [<B>-b</B> <I>bind_address</I>] [<B>-c</B> <I>cipher_spec</I>] [<B>-e</B>
         <I>escape_char</I>] [<B>-i</B> <I>identity_file</I>] [<B>-l</B> <I>login_name</I>] [<B>-m</B> <I>mac_spec</I>] [<B>-o</B>
         <I>option</I>] [<B>-p</B> <I>port</I>] [<B>-F</B> <I>configfile</I>] [<B>-L</B> <I>port</I>:<I>host</I>:<I>hostport</I>] [<B>-R</B>
         <I>port</I>:<I>host</I>:<I>hostport</I>] [<B>-D</B> <I>port</I>] <I>hostname</I> | <I>user@hostname</I> [<I>command</I>]

<a name="DESCRIPTION" href="#end"><B>DESCRIPTION</B></a>
     <B>ssh</B> (SSH client) is a program for logging into a remote machine and for
     executing commands on a remote machine.  It is intended to replace rlogin
     and rsh, and provide secure encrypted communications between two untrust-
     ed hosts over an insecure network.  X11 connections and arbitrary TCP/IP
     ports can also be forwarded over the secure channel.

     <B>ssh</B> connects and logs into the specified <I>hostname</I>. The user must prove
     his/her identity to the remote machine using one of several methods de-
     pending on the protocol version used:

   <B>SSH protocol</B> <B>version 1</B>

     First, if the machine the user logs in from is listed in <I>/etc/hosts.equiv</I>
     or <I>/etc/shosts.equiv</I> on the remote machine, and the user names are the
     same on both sides, the user is immediately permitted to log in.  Second,
     if <I>.rhosts</I> or <I>.shosts</I> exists in the user's home directory on the remote
     machine and contains a line containing the name of the client machine and
     the name of the user on that machine, the user is permitted to log in.
     This form of authentication alone is normally not allowed by the server
     because it is not secure.

     The second authentication method is the <I>rhosts</I> or <I>hosts.equiv</I> method com-
     bined with RSA-based host authentication.  It means that if the login
     would be permitted by <I>$HOME/.rhosts</I>, <I>$HOME/.shosts</I>, <I>/etc/hosts.equiv</I>, or
     <I>/etc/shosts.equiv</I>, and if additionally the server can verify the client's
     host key (see <I>/etc/ssh/ssh_known_hosts</I> and <I>$HOME/.ssh/known_hosts</I> in the
     <I>FILES</I> section), only then login is permitted.  This authentication method
     closes security holes due to IP spoofing, DNS spoofing and routing spoof-
     ing.  [Note to the administrator: <I>/etc/hosts.equiv</I>, <I>$HOME/.rhosts</I>, and
     the rlogin/rsh protocol in general, are inherently insecure and should be
     disabled if security is desired.]

     As a third authentication method, <B>ssh</B> supports RSA based authentication.
     The scheme is based on public-key cryptography: there are cryptosystems
     where encryption and decryption are done using separate keys, and it is
     not possible to derive the decryption key from the encryption key.  RSA
     is one such system.  The idea is that each user creates a public/private
     key pair for authentication purposes.  The server knows the public key,
     and only the user knows the private key.  The file
     <I>$HOME/.ssh/authorized_keys</I> lists the public keys that are permitted for
     logging in.  When the user logs in, the <B>ssh</B> program tells the server
     which key pair it would like to use for authentication.  The server
     checks if this key is permitted, and if so, sends the user (actually the
     <B>ssh</B> program running on behalf of the user) a challenge, a random number,
     encrypted by the user's public key.  The challenge can only be decrypted
     using the proper private key.  The user's client then decrypts the chal-
     lenge using the private key, proving that he/she knows the private key
     but without disclosing it to the server.

     <B>ssh</B> implements the RSA authentication protocol automatically.  The user
     creates his/her RSA key pair by running <A HREF="/cgi-bin/man.cgi?query=ssh-keygen&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">ssh-keygen(1)</A>. This stores the
     private key in <I>$HOME/.ssh/identity</I> and the public key in
     <I>$HOME/.ssh/identity.pub</I> in the user's home directory.  The user should
     then copy the <I>identity.pub</I> to <I>$HOME/.ssh/authorized_keys</I> in his/her home
     directory on the remote machine (the <I>authorized_keys</I> file corresponds to
     the conventional <I>$HOME/.rhosts</I> file, and has one key per line, though the
     lines can be very long).  After this, the user can log in without giving
     the password.  RSA authentication is much more secure than rhosts authen-
     tication.

     The most convenient way to use RSA authentication may be with an authen-
     tication agent.  See <A HREF="/cgi-bin/man.cgi?query=ssh-agent&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">ssh-agent(1)</A> for more information.

     If other authentication methods fail, <B>ssh</B> prompts the user for a pass-
     word.  The password is sent to the remote host for checking; however,
     since all communications are encrypted, the password cannot be seen by
     someone listening on the network.

   <B>SSH protocol</B> <B>version 2</B>

     When a user connects using protocol version 2 similar authentication
     methods are available.  Using the default values for
     <B>PreferredAuthentications</B>, the client will try to authenticate first using
     the hostbased method; if this method fails public key authentication is
     attempted, and finally if this method fails keyboard-interactive and
     password authentication are tried.

     The public key method is similar to RSA authentication described in the
     previous section and allows the RSA or DSA algorithm to be used: The
     client uses his private key, <I>$HOME/.ssh/id_dsa</I> or <I>$HOME/.ssh/id_rsa</I>, to
     sign the session identifier and sends the result to the server.  The
     server checks whether the matching public key is listed in
     <I>$HOME/.ssh/authorized_keys</I> and grants access if both the key is found and
     the signature is correct.  The session identifier is derived from a
     shared Diffie-Hellman value and is only known to the client and the serv-
     er.

     If public key authentication fails or is not available a password can be
     sent encrypted to the remote host for proving the user's identity.

     Additionally, <B>ssh</B> supports hostbased or challenge response authentica-
     tion.

     Protocol 2 provides additional mechanisms for confidentiality (the traf-
     fic is encrypted using 3DES, Blowfish, CAST128 or Arcfour) and integrity
     (hmac-md5, hmac-sha1).  Note that protocol 1 lacks a strong mechanism for
     ensuring the integrity of the connection.

   <B>Login session</B> <B>and remote</B> execution

     When the user's identity has been accepted by the server, the server ei-
     ther executes the given command, or logs into the machine and gives the
     user a normal shell on the remote machine.  All communication with the
     remote command or shell will be automatically encrypted.

     If a pseudo-terminal has been allocated (normal login session), the user
     may use the escape characters noted below.

     If no pseudo tty has been allocated, the session is transparent and can
     be used to reliably transfer binary data.  On most systems, setting the
     escape character to ``none'' will also make the session transparent even
     if a tty is used.

     The session terminates when the command or shell on the remote machine
     exits and all X11 and TCP/IP connections have been closed.  The exit sta-
     tus of the remote program is returned as the exit status of <B>ssh</B>.

   <B>Escape Characters</B>

     When a pseudo terminal has been requested, ssh supports a number of func-
     tions through the use of an escape character.

     A single tilde character can be sent as <B>~~</B> or by following the tilde by a
     character other than those described below.  The escape character must
     always follow a newline to be interpreted as special.  The escape charac-
     ter can be changed in configuration files using the <B>EscapeChar</B> configura-
     tion directive or on the command line by the <B>-e</B> option.

     The supported escapes (assuming the default `~') are:

     <B>~.</B>      Disconnect

     <B>~^Z</B>     Background ssh

     <B>~#</B>      List forwarded connections

     <B>~</B>&amp;      Background ssh at logout when waiting for forwarded connection /
             X11 sessions to terminate

     <B>~?</B>      Display a list of escape characters

     <B>~C</B>      Open command line (only useful for adding port forwardings using
             the <B>-L</B> and <B>-R</B> options)

     <B>~R</B>      Request rekeying of the connection (only useful for SSH protocol
             version 2 and if the peer supports it)

   <B>X11 and</B> <B>TCP forwarding</B>

     If the <B>ForwardX11</B> variable is set to ``yes'' (or, see the description of
     the <B>-X</B> and <B>-x</B> options described later) and the user is using X11 (the
     DISPLAY environment variable is set), the connection to the X11 display
     is automatically forwarded to the remote side in such a way that any X11
     programs started from the shell (or command) will go through the encrypt-
     ed channel, and the connection to the real X server will be made from the
     local machine.  The user should not manually set DISPLAY. Forwarding of
     X11 connections can be configured on the command line or in configuration
     files.

     The DISPLAY value set by <B>ssh</B> will point to the server machine, but with a
     display number greater than zero.  This is normal, and happens because
     <B>ssh</B> creates a ``proxy'' X server on the server machine for forwarding the
     connections over the encrypted channel.

     <B>ssh</B> will also automatically set up Xauthority data on the server machine.
     For this purpose, it will generate a random authorization cookie, store
     it in Xauthority on the server, and verify that any forwarded connections
     carry this cookie and replace it by the real cookie when the connection
     is opened.  The real authentication cookie is never sent to the server
     machine (and no cookies are sent in the plain).

     If the user is using an authentication agent, the connection to the agent
     is automatically forwarded to the remote side unless disabled on the com-
     mand line or in a configuration file.

     Forwarding of arbitrary TCP/IP connections over the secure channel can be
     specified either on the command line or in a configuration file.  One
     possible application of TCP/IP forwarding is a secure connection to an
     electronic purse; another is going through firewalls.

   <B>Server authentication</B>

     <B>ssh</B> automatically maintains and checks a database containing identifica-
     tions for all hosts it has ever been used with.  Host keys are stored in
     <I>$HOME/.ssh/known_hosts</I> in the user's home directory.  Additionally, the
     file <I>/etc/ssh/ssh_known_hosts</I> is automatically checked for known hosts.
     Any new hosts are automatically added to the user's file.  If a host's
     identification ever changes, <B>ssh</B> warns about this and disables password
     authentication to prevent a trojan horse from getting the user's pass-
     word.  Another purpose of this mechanism is to prevent man-in-the-middle
     attacks which could otherwise be used to circumvent the encryption.  The
     <B>StrictHostKeyChecking</B> option can be used to prevent logins to machines
     whose host key is not known or has changed.

     The options are as follows:

     <B>-a</B>      Disables forwarding of the authentication agent connection.

     <B>-A</B>      Enables forwarding of the authentication agent connection.  This
             can also be specified on a per-host basis in a configuration
             file.

     <B>-b</B> <I>bind_address</I>
             Specify the interface to transmit from on machines with multiple
             interfaces or aliased addresses.

     <B>-c</B> <I>blowfish|3des|des</I>
             Selects the cipher to use for encrypting the session.  <I>3des</I> is
             used by default.  It is believed to be secure.  <I>3des</I> (triple-des)
             is an encrypt-decrypt-encrypt triple with three different keys.
             <I>blowfish</I> is a fast block cipher, it appears very secure and is
             much faster than <I>3des</I>. <I>des</I> is only supported in the <B>ssh</B> client
             for interoperability with legacy protocol 1 implementations that
             do not support the <I>3des</I> cipher.  Its use is strongly discouraged
             due to cryptographic weaknesses.

     <B>-c</B> <I>cipher_spec</I>
             Additionally, for protocol version 2 a comma-separated list of
             ciphers can be specified in order of preference.  See <B>Ciphers</B> for
             more information.

     <B>-e</B> <I>ch|^ch|none</I>
             Sets the escape character for sessions with a pty (default: `~').
             The escape character is only recognized at the beginning of a
             line.  The escape character followed by a dot (`.') closes the
             connection, followed by control-Z suspends the connection, and
             followed by itself sends the escape character once.  Setting the
             character to ``none'' disables any escapes and makes the session
             fully transparent.

     <B>-f</B>      Requests <B>ssh</B> to go to background just before command execution.
             This is useful if <B>ssh</B> is going to ask for passwords or passphras-
             es, but the user wants it in the background.  This implies <B>-n</B>.
             The recommended way to start X11 programs at a remote site is
             with something like <B>ssh -f</B> <B>host xterm</B>.

     <B>-g</B>      Allows remote hosts to connect to local forwarded ports.

     <B>-i</B> <I>identity_file</I>
             Selects a file from which the identity (private key) for RSA or
             DSA authentication is read.  The default is <I>$HOME/.ssh/identity</I>
             for protocol version 1, and <I>$HOME/.ssh/id_rsa</I> and
             <I>$HOME/.ssh/id_dsa</I> for protocol version 2.  Identity files may al-
             so be specified on a per-host basis in the configuration file.
             It is possible to have multiple <B>-i</B> options (and multiple identi-
             ties specified in configuration files).

     <B>-I</B> <I>smartcard_device</I>
             Specifies which smartcard device to use. The argument is the de-
             vice <B>ssh</B> should use to communicate with a smartcard used for
             storing the user's private RSA key.

     <B>-k</B>      Disables forwarding of Kerberos tickets and AFS tokens.  This may
             also be specified on a per-host basis in the configuration file.

     <B>-l</B> <I>login_name</I>
             Specifies the user to log in as on the remote machine.  This also
             may be specified on a per-host basis in the configuration file.

     <B>-m</B> <I>mac_spec</I>
             Additionally, for protocol version 2 a comma-separated list of
             MAC (message authentication code) algorithms can be specified in
             order of preference.  See the <B>MACs</B> keyword for more information.

     <B>-n</B>      Redirects stdin from <I>/dev/null</I> (actually, prevents reading from
             stdin).  This must be used when <B>ssh</B> is run in the background.  A
             common trick is to use this to run X11 programs on a remote ma-
             chine.  For example, <B>ssh -n</B> <B>shadows.cs.hut.fi emacs</B> &amp; will start
             an emacs on shadows.cs.hut.fi, and the X11 connection will be au-
             tomatically forwarded over an encrypted channel.  The <B>ssh</B> program
             will be put in the background.  (This does not work if <B>ssh</B> needs
             to ask for a password or passphrase; see also the <B>-f</B> option.)

     <B>-N</B>      Do not execute a remote command.  This is useful for just for-
             warding ports (protocol version 2 only).

     <B>-o</B> <I>option</I>
             Can be used to give options in the format used in the configura-
             tion file.  This is useful for specifying options for which there
             is no separate command-line flag.

     <B>-p</B> <I>port</I>
             Port to connect to on the remote host.  This can be specified on
             a per-host basis in the configuration file.

     <B>-P</B>      Use a non-privileged port for outgoing connections.  This can be
             used if a firewall does not permit connections from privileged
             ports.  Note that this option turns off <B>RhostsAuthentication</B> and
             <B>RhostsRSAAuthentication</B> for older servers.

     <B>-q</B>      Quiet mode.  Causes all warning and diagnostic messages to be
             suppressed.

     <B>-s</B>      May be used to request invocation of a subsystem on the remote
             system. Subsystems are a feature of the SSH2 protocol which fa-
             cilitate the use of SSH as a secure transport for other applica-
             tions (eg. sftp). The subsystem is specified as the remote com-
             mand.

     <B>-t</B>      Force pseudo-tty allocation.  This can be used to execute arbi-
             trary screen-based programs on a remote machine, which can be
             very useful, e.g., when implementing menu services.  Multiple <B>-t</B>
             options force tty allocation, even if <B>ssh</B> has no local tty.

     <B>-T</B>      Disable pseudo-tty allocation.

     <B>-v</B>      Verbose mode.  Causes <B>ssh</B> to print debugging messages about its
             progress.  This is helpful in debugging connection, authentica-
             tion, and configuration problems.  Multiple <B>-v</B> options increases
             the verbosity.  Maximum is 3.

     <B>-x</B>      Disables X11 forwarding.

     <B>-X</B>      Enables X11 forwarding.  This can also be specified on a per-host

             basis in a configuration file.

     <B>-C</B>      Requests compression of all data (including stdin, stdout,
             stderr, and data for forwarded X11 and TCP/IP connections).  The
             compression algorithm is the same used by <A HREF="/cgi-bin/man.cgi?query=gzip&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">gzip(1)</A>, and the
             ``level'' can be controlled by the <B>CompressionLevel</B> option.  Com-
             pression is desirable on modem lines and other slow connections,
             but will only slow down things on fast networks.  The default
             value can be set on a host-by-host basis in the configuration
             files; see the <B>Compression</B> option.

     <B>-F</B> <I>configfile</I>
             Specifies an alternative per-user configuration file.  If a con-
             figuration file is given on the command line, the system-wide
             configuration file (<I>/etc/ssh/ssh_config</I>) will be ignored.  The
             default for the per-user configuration file is <I>$HOME/.ssh/config</I>.

     <B>-L</B> <I>port:host:hostport</I>
             Specifies that the given port on the local (client) host is to be
             forwarded to the given host and port on the remote side.  This
             works by allocating a socket to listen to <I>port</I> on the local side,
             and whenever a connection is made to this port, the connection is
             forwarded over the secure channel, and a connection is made to
             <I>host</I> port <I>hostport</I> from the remote machine.  Port forwardings can
             also be specified in the configuration file.  Only root can for-
             ward privileged ports.  IPv6 addresses can be specified with an
             alternative syntax: <I>port/host/hostport</I>

     <B>-R</B> <I>port:host:hostport</I>
             Specifies that the given port on the remote (server) host is to
             be forwarded to the given host and port on the local side.  This
             works by allocating a socket to listen to <I>port</I> on the remote
             side, and whenever a connection is made to this port, the connec-
             tion is forwarded over the secure channel, and a connection is
             made to <I>host</I> port <I>hostport</I> from the local machine.  Port forward-
             ings can also be specified in the configuration file.  Privileged
             ports can be forwarded only when logging in as root on the remote
             machine.  IPv6 addresses can be specified with an alternative
             syntax: <I>port/host/hostport</I>

     <B>-D</B> <I>port</I>
             Specifies a local ``dynamic'' application-level port forwarding.
             This works by allocating a socket to listen to <I>port</I> on the local
             side, and whenever a connection is made to this port, the connec-
             tion is forwarded over the secure channel, and the application
             protocol is then used to determine where to connect to from the
             remote machine.  Currently the SOCKS4 protocol is supported, and
             <B>ssh</B> will act as a SOCKS4 server.  Only root can forward privi-
             leged ports.  Dynamic port forwardings can also be specified in
             the configuration file.

     <B>-1</B>      Forces <B>ssh</B> to try protocol version 1 only.

     <B>-2</B>      Forces <B>ssh</B> to try protocol version 2 only.

     <B>-4</B>      Forces <B>ssh</B> to use IPv4 addresses only.

     <B>-6</B>      Forces <B>ssh</B> to use IPv6 addresses only.

<a name="CONFIGURATION+FILES" href="#end"><B>CONFIGURATION FILES</B></a>
     <B>ssh</B> may additionally obtain configuration data from a per-user configura-
     tion file and a system-wide configuration file.  The file format and con-
     figuration options are described in <A HREF="/cgi-bin/man.cgi?query=ssh_config&sektion=5&arch=&apropos=0&manpath=OpenBSD+Current">ssh_config(5)</A>.

<a name="ENVIRONMENT" href="#end"><B>ENVIRONMENT</B></a>

     <B>ssh</B> will normally set the following environment variables:

     DISPLAY
             The DISPLAY variable indicates the location of the X11 server.
             It is automatically set by <B>ssh</B> to point to a value of the form
             ``hostname:n'' where hostname indicates the host where the shell
             runs, and n is an integer &gt;= 1.  <B>ssh</B> uses this special value to
             forward X11 connections over the secure channel.  The user should
             normally not set DISPLAY explicitly, as that will render the X11
             connection insecure (and will require the user to manually copy
             any required authorization cookies).

     HOME    Set to the path of the user's home directory.

     LOGNAME
             Synonym for USER; set for compatibility with systems that use
             this variable.

     MAIL    Set to the path of the user's mailbox.

     PATH    Set to the default PATH, as specified when compiling <B>ssh</B>.

     SSH_ASKPASS
             If <B>ssh</B> needs a passphrase, it will read the passphrase from the
             current terminal if it was run from a terminal.  If <B>ssh</B> does not
             have a terminal associated with it but DISPLAY and SSH_ASKPASS
             are set, it will execute the program specified by SSH_ASKPASS and
             open an X11 window to read the passphrase.  This is particularly
             useful when calling <B>ssh</B> from a <I>.Xsession</I> or related script.
             (Note that on some machines it may be necessary to redirect the
             input from <I>/dev/null</I> to make this work.)

     SSH_AUTH_SOCK
             Identifies the path of a unix-domain socket used to communicate
             with the agent.

     SSH_CLIENT
             Identifies the client end of the connection.  The variable con-
             tains three space-separated values: client ip-address, client
             port number, and server port number.

     SSH_ORIGINAL_COMMAND
             The variable contains the original command line if a forced com-
             mand is executed.  It can be used to extract the original argu-
             ments.

     SSH_TTY
             This is set to the name of the tty (path to the device) associat-
             ed with the current shell or command.  If the current session has
             no tty, this variable is not set.

     TZ      The timezone variable is set to indicate the present timezone if
             it was set when the daemon was started (i.e., the daemon passes
             the value on to new connections).

     USER    Set to the name of the user logging in.

     Additionally, <B>ssh</B> reads <I>$HOME/.ssh/environment</I>, and adds lines of the
     format ``VARNAME=value'' to the environment.

<a name="FILES" href="#end"><B>FILES</B></a>
     $HOME/.ssh/known_hosts
             Records host keys for all hosts the user has logged into that are
             not in <I>/etc/ssh/ssh_known_hosts</I>. See <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A>.

     $HOME/.ssh/identity, $HOME/.ssh/id_dsa, $HOME/.ssh/id_rsa
             Contains the authentication identity of the user.  They are for
             protocol 1 RSA, protocol 2 DSA, and protocol 2 RSA, respectively.
             These files contain sensitive data and should be readable by the
             user but not accessible by others (read/write/execute).  Note
             that <B>ssh</B> ignores a private key file if it is accessible by oth-
             ers.  It is possible to specify a passphrase when generating the
             key; the passphrase will be used to encrypt the sensitive part of
             this file using 3DES.

     $HOME/.ssh/identity.pub, $HOME/.ssh/id_dsa.pub, $HOME/.ssh/id_rsa.pub
             Contains the public key for authentication (public part of the
             identity file in human-readable form).  The contents of the
             <I>$HOME/.ssh/identity.pub</I> file should be added to
             <I>$HOME/.ssh/authorized_keys</I> on all machines where the user wishes
             to log in using protocol version 1 RSA authentication.  The con-
             tents of the <I>$HOME/.ssh/id_dsa.pub</I> and <I>$HOME/.ssh/id_rsa.pub</I> file
             should be added to <I>$HOME/.ssh/authorized_keys</I> on all machines
             where the user wishes to log in using protocol version 2 DSA/RSA
             authentication.  These files are not sensitive and can (but need
             not) be readable by anyone.  These files are never used automati-
             cally and are not necessary; they are only provided for the con-
             venience of the user.

     $HOME/.ssh/config
             This is the per-user configuration file.  The file format and
             configuration options are described in <A HREF="/cgi-bin/man.cgi?query=ssh_config&sektion=5&arch=&apropos=0&manpath=OpenBSD+Current">ssh_config(5)</A>.

     $HOME/.ssh/authorized_keys
             Lists the public keys (RSA/DSA) that can be used for logging in
             as this user.  The format of this file is described in the
             <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> manual page.  In the simplest form the format is the same
             as the .pub identity files.  This file is not highly sensitive,
             but the recommended permissions are read/write for the user, and
             not accessible by others.

     /etc/ssh/ssh_known_hosts
             Systemwide list of known host keys.  This file should be prepared
             by the system administrator to contain the public host keys of
             all machines in the organization.  This file should be world-
             readable.  This file contains public keys, one per line, in the
             following format (fields separated by spaces): system name, pub-
             lic key and optional comment field.  When different names are
             used for the same machine, all such names should be listed, sepa-
             rated by commas.  The format is described on the <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> manual
             page.

             The canonical system name (as returned by name servers) is used
             by <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> to verify the client host when logging in; other names
             are needed because <B>ssh</B> does not convert the user-supplied name to
             a canonical name before checking the key, because someone with
             access to the name servers would then be able to fool host au-
             thentication.

     /etc/ssh/ssh_config
             Systemwide configuration file.  The file format and configuration
             options are described in <A HREF="/cgi-bin/man.cgi?query=ssh_config&sektion=5&arch=&apropos=0&manpath=OpenBSD+Current">ssh_config(5)</A>.

     /etc/ssh/ssh_host_key, /etc/ssh/ssh_host_dsa_key,
             /etc/ssh/ssh_host_rsa_key
             These three files contain the private parts of the host keys and
             are used for <B>RhostsRSAAuthentication</B> and <B>HostbasedAuthentication</B>.
             If the protocol version 1 <B>RhostsRSAAuthentication</B> method is used,
             <B>ssh</B> must be setuid root, since the host key is readable only by
             root.  For protocol version 2, <B>ssh</B> uses <A HREF="/cgi-bin/man.cgi?query=ssh-keysign&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">ssh-keysign(8)</A> to access
             the host keys for <B>HostbasedAuthentication</B>. This eliminates the
             requirement that <B>ssh</B> be setuid root when that authentication

             method is used.  By default <B>ssh</B> is not setuid root.

     $HOME/.rhosts
             This file is used in <I>.rhosts</I> authentication to list the host/user
             pairs that are permitted to log in.  (Note that this file is also
             used by rlogin and rsh, which makes using this file insecure.)
             Each line of the file contains a host name (in the canonical form
             returned by name servers), and then a user name on that host,
             separated by a space.  On some machines this file may need to be
             world-readable if the user's home directory is on a NFS parti-
             tion, because <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> reads it as root.  Additionally, this file
             must be owned by the user, and must not have write permissions
             for anyone else.  The recommended permission for most machines is
             read/write for the user, and not accessible by others.

             Note that by default <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> will be installed so that it re-
             quires successful RSA host authentication before permitting
             .rhosts authentication.  If the server machine does not have the
             client's host key in <I>/etc/ssh/ssh_known_hosts</I>, it can be stored
             in <I>$HOME/.ssh/known_hosts</I>. The easiest way to do this is to con-
             nect back to the client from the server machine using ssh; this
             will automatically add the host key to <I>$HOME/.ssh/known_hosts</I>.

     $HOME/.shosts
             This file is used exactly the same way as <I>.rhosts</I>. The purpose
             for having this file is to be able to use rhosts authentication
             with <B>ssh</B> without permitting login with <B>rlogin</B> or <A HREF="/cgi-bin/man.cgi?query=rsh&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">rsh(1)</A>.

     /etc/hosts.equiv
             This file is used during <I>.rhosts</I> <I>authentication.</I> It contains
             canonical hosts names, one per line (the full format is described
             on the <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> manual page).  If the client host is found in this
             file, login is automatically permitted provided client and server
             user names are the same.  Additionally, successful RSA host au-
             thentication is normally required.  This file should only be
             writable by root.

     /etc/shosts.equiv
             This file is processed exactly as <I>/etc/hosts.equiv</I>. This file may
             be useful to permit logins using <B>ssh</B> but not using rsh/rlogin.

     /etc/ssh/sshrc
             Commands in this file are executed by <B>ssh</B> when the user logs in
             just before the user's shell (or command) is started.  See the
             <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> manual page for more information.

     $HOME/.ssh/rc
             Commands in this file are executed by <B>ssh</B> when the user logs in
             just before the user's shell (or command) is started.  See the
             <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A> manual page for more information.

     $HOME/.ssh/environment
             Contains additional definitions for environment variables, see
             section <I>ENVIRONMENT</I> above.

<a name="DIAGNOSTICS" href="#end"><B>DIAGNOSTICS</B></a>
     <B>ssh</B> exits with the exit status of the remote command or with 255 if an
     error occurred.

<a name="AUTHORS" href="#end"><B>AUTHORS</B></a>
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by
     Tatu Ylonen.  Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo
     de Raadt and Dug Song removed many bugs, re-added newer features and cre-
     ated OpenSSH.  Markus Friedl contributed the support for SSH protocol
     versions 1.5 and 2.0.

<a name="SEE+ALSO" href="#end"><B>SEE ALSO</B></a>
     <A HREF="/cgi-bin/man.cgi?query=rsh&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">rsh(1)</A>, <A HREF="/cgi-bin/man.cgi?query=scp&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">scp(1)</A>, <A HREF="/cgi-bin/man.cgi?query=sftp&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">sftp(1)</A>, <A HREF="/cgi-bin/man.cgi?query=ssh-add&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">ssh-add(1)</A>, <A HREF="/cgi-bin/man.cgi?query=ssh-agent&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">ssh-agent(1)</A>, <A HREF="/cgi-bin/man.cgi?query=ssh-keygen&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">ssh-keygen(1)</A>,
     <A HREF="/cgi-bin/man.cgi?query=telnet&sektion=1&arch=&apropos=0&manpath=OpenBSD+Current">telnet(1)</A>, <A HREF="/cgi-bin/man.cgi?query=ssh_config&sektion=5&arch=&apropos=0&manpath=OpenBSD+Current">ssh_config(5)</A>, <A HREF="/cgi-bin/man.cgi?query=ssh-keysign&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">ssh-keysign(8)</A>, <A HREF="/cgi-bin/man.cgi?query=sshd&sektion=8&arch=&apropos=0&manpath=OpenBSD+Current">sshd(8)</A>

     T. Ylonen, T. Kivinen, M. Saarinen, T. Rinne, and S. Lehtinen, <I>SSH</I>
     <I>Protocol</I> <I>Architecture</I>, draft-ietf-secsh-architecture-12.txt, January
     2002, work in progress material.

OpenBSD 3.1                   September 25, 1999                            10
</PRE>
<a name="end">
<hr noshade>
<a href="#NAME">NAME</a> |
<a href="#SYNOPSIS">SYNOPSIS</a> |
<a href="#DESCRIPTION">DESCRIPTION</a> |
<a href="#CONFIGURATION+FILES">CONFIGURATION FILES</a> |
<a href="#ENVIRONMENT">ENVIRONMENT</a> |
<a href="#FILES">FILES</a> |
<a href="#DIAGNOSTICS">DIAGNOSTICS</a> |
<a href="#AUTHORS">AUTHORS</a> |
<a href="#SEE+ALSO">SEE ALSO</a>
</BODY>
</HTML>
